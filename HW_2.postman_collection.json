{
	"info": {
		"_postman_id": "2f6f5164-cc4c-435e-8f62-4efb72183677",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Body is correct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"// 3. Проверить, что в body приходит правильный string.",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body(\"This is the first responce from server!\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"// 3. Спарсить response body в json.",
							"let resp_data = pm.response.json()",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"pm.test('verify name', function () {",
							"    pm.expect(resp_data.name).to.eql('Sasha')",
							"})",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"pm.test('verify age', function () {",
							"    pm.expect(+resp_data.age).to.eql(31)",
							"})",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test('verify salary', function () {",
							"    pm.expect(resp_data.salary).to.eql(1000)",
							"})",
							"// 7. Спарсить request.",
							"let req_data = request.data",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"let req_name = req_data.name",
							"pm.test('verify name from request', function () {",
							"    pm.expect(resp_data.name).to.eql(req_name)",
							"})",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"let req_age = req_data.age",
							"pm.test('verify age from request', function () {",
							"    pm.expect(resp_data.age).to.eql(req_age)",
							"})",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"let req_salary = req_data.salary",
							"pm.test('verify salary from request', function () {",
							"    pm.expect(resp_data.salary).to.eql(+req_salary)",
							"})",
							"// 11. Вывести в консоль параметр family из response.",
							"console.log(resp_data.family)",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"let salary_year = req_data.salary * 4",
							"pm.test('verify salary after 1.5 year', function () {",
							"    pm.expect(resp_data.family.u_salary_1_5_year).to.eql(salary_year)",
							"})",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Sasha",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"// 3. Спарсить response body в json.",
							"let resp_data = pm.response.json()",
							"// 4. Спарсить request.",
							"let req_data = request.data",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"let req_name = req_data.name",
							"pm.test('verify name from request', function () {",
							"    pm.expect(resp_data.name).to.eql(req_name)",
							"})",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"let req_age = req_data.age",
							"pm.test('verify age from request', function () {",
							"    pm.expect(resp_data.age).to.eql(req_age)",
							"})",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"let req_salary = req_data.salary",
							"pm.test('verify salary from request', function () {",
							"    pm.expect(resp_data.salary).to.eql(+req_salary)",
							"})",
							"// 8. Вывести в консоль параметр family из response.",
							"console.log(resp_data.family)",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Dog has a 'name'\", function () {",
							"    pm.expect(resp_data.family.pets.dog).to.have.property(\"name\");",
							"});",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Dog has a 'age'\", function () {",
							"    pm.expect(resp_data.family.pets.dog).to.have.property(\"age\");",
							"});",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"Dog has a name Luky\", function () {",
							"    pm.expect(resp_data.family.pets.dog.name).to.deep.include(\"Luky\");",
							"});",
							"// 12. Проверить, что параметр age имеет значение 4",
							"pm.test(\"Dog age is 4\", function () {",
							"    pm.expect(resp_data.family.pets.dog.age).to.deep.equal(4);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Sasha",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Sasha&age=31&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Sasha"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"// 3. Спарсить response body в json.",
							"let resp_data = pm.response.json()",
							"// 4. Спарсить request.",
							"let req_data = pm.request.url.query.toObject() // способ 1",
							"let req_data_2 = pm.request.url.query.get(\"name\") // способ 2",
							"let req_data_3= pm.request.url.query.all() // способ 3",
							"console.log(req_data)",
							"console.log(req_data_2)",
							"console.log(req_data_3)",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test('verify name from response', function () {",
							"    pm.expect(resp_data.name).to.deep.equal(req_data.name)",
							"})",
							"pm.test('verify_2 name from response', function () {",
							"    pm.expect(resp_data.name).to.deep.equal(req_data_2)",
							"})",
							"pm.test('verify_3 name from response', function () {",
							"    pm.expect(resp_data.name).to.deep.equal(req_data_3[0].value)",
							"})",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test('verify age from response', function () {",
							"    pm.expect(resp_data.age).to.deep.equal(+req_data.age)",
							"})",
							"// 7. Вывести в консоль параметр salary из request.",
							"console.log(req_data.salary) // ",
							"console.log(req_data_3[2].value)",
							"// 8. Вывести в консоль параметр salary из response.",
							"console.log(resp_data.salary)",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(resp_data.salary[0])",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(resp_data.salary[1])",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(resp_data.salary[2])",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test('verify salary [0] from response', function () {",
							"    pm.expect(resp_data.salary[0]).to.eql(+req_data.salary)",
							"})",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"let double_salary = req_data.salary * 2",
							"pm.test('verify salary [1] from response', function () {",
							"    pm.expect(+resp_data.salary[1]).to.eql(double_salary)",
							"})",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"let triple_salary = req_data.salary * 3",
							"pm.test('verify salary [1] from response', function () {",
							"    pm.expect(+resp_data.salary[2]).to.eql(triple_salary)",
							"})",
							"// 15. Создать в окружении переменную name",
							"let name = resp_data.name",
							"// 16. Создать в окружении переменную age",
							"let age = resp_data.age",
							"// 17. Создать в окружении переменную salary",
							"let salary = resp_data.salary",
							"// 18. Передать в окружение переменную name",
							"pm.environment.set(\"name\", name);",
							"// 19. Передать в окружение переменную age",
							"pm.environment.set(\"age\", age);",
							"// 20. Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", salary);",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"for (i = 100; i <= 300; i+=100) {",
							"    console.log(i)",
							"}",
							"",
							"let sal = resp_data.salary",
							"console.log(Object.values(sal))",
							"console.log(resp_data.salary)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "31",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						},
						{
							"key": "name",
							"value": "Sasha",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Sasha&age=31&salary=100",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Sasha"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2?name=Sasha&age=31&salary=200",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Sasha"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "200"
						}
					]
				}
			},
			"response": []
		}
	]
}